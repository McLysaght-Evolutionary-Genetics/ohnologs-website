generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// base types
enum GenomeAssembly {
  chromosome
  scaffold
}

model GenomeSource {
  //
  sourceId String @id
  name     String

  //
  species Species[]
}

model Species {
  //
  speciesId String @id
  name      String
  version   String

  assembly       GenomeAssembly @default(chromosome)
  outgroup       Boolean        @default(false)
  reconstruction Boolean        @default(false)

  //
  source   GenomeSource @relation(fields: [sourceId], references: [sourceId])
  sourceId String

  //
  genes     Gene[]
  scaffolds Scaffold[]
  trees     TreeSpecies[]
}

model Scaffold {
  //
  scaffoldId String
  start      Int
  end        Int

  //
  species   Species @relation(fields: [speciesId], references: [speciesId])
  speciesId String

  genes    Gene[]
  segments Segment[]
  tracks   MsynTrack[]

  //
  @@id([speciesId, scaffoldId])
}

model Segment {
  //
  segmentId String
  start     Int
  end       Int

  //
  scaffold   Scaffold @relation(fields: [speciesId, scaffoldId], references: [speciesId, scaffoldId])
  speciesId  String
  scaffoldId String

  genes Gene[]

  //
  @@id([speciesId, scaffoldId, segmentId])
  @@unique([segmentId, scaffoldId])
}

model Gene {
  //
  geneId    String @id
  proteinId String @unique
  start     Int
  end       Int

  pvc Int?
  pgc Int?

  //
  species   Species @relation(fields: [speciesId], references: [speciesId])
  speciesId String

  scaffold   Scaffold? @relation(fields: [scaffoldId, speciesId], references: [scaffoldId, speciesId])
  scaffoldId String?

  segment   Segment? @relation(fields: [scaffoldId, segmentId], references: [scaffoldId, segmentId])
  segmentId String?

  family   Family? @relation(fields: [familyId], references: [familyId])
  familyId String?

  labels GeneLabel[]
  trees  TreeGene[]
  groups MsynGene[]

  queries  Ohnology[] @relation("query")
  subjects Ohnology[] @relation("subject")

  //
  @@unique([geneId, scaffoldId])
}

// homology
model Family {
  //
  familyId String @id

  //
  genes Gene[]
}

enum OhnologyRelation {
  r1
  r2
}

model Ohnology {
  //
  relation OhnologyRelation

  //
  query   Gene   @relation(name: "query", fields: [queryId], references: [geneId])
  queryId String

  subject   Gene   @relation(name: "subject", fields: [subjectId], references: [geneId])
  subjectId String

  //
  @@id([queryId, subjectId])
}

// labels
model Label {
  //
  labelId String @id
  name    String

  //
  genes GeneLabel[]
}

model GeneLabel {
  //
  gene   Gene   @relation(fields: [geneId], references: [geneId])
  geneId String

  label   Label  @relation(fields: [labelId], references: [labelId])
  labelId String

  //
  @@id([geneId, labelId])
}

// tree page
model Tree {
  //
  treeId String @id
  newick String

  //
  genes   TreeGene[]
  species TreeSpecies[]
}

model TreeGene {
  //
  tree   Tree   @relation(fields: [treeId], references: [treeId])
  treeId String

  gene   Gene   @relation(fields: [geneId], references: [geneId])
  geneId String

  //
  @@id([treeId, geneId])
}

model TreeSpecies {
  //
  tree   Tree   @relation(fields: [treeId], references: [treeId])
  treeId String

  species   Species @relation(fields: [speciesId], references: [speciesId])
  speciesId String

  //
  @@id([treeId, speciesId])
}

// synteny page
model MsynBlock {
  //
  blockId String @id

  //
  groups MsynGroup[]
  tracks MsynTrack[]
}

model MsynTrack {
  //
  start Int
  end   Int

  //
  block   MsynBlock @relation(fields: [blockId], references: [blockId])
  blockId String

  scaffold   Scaffold @relation(fields: [speciesId, scaffoldId], references: [speciesId, scaffoldId])
  speciesId  String
  scaffoldId String

  genes MsynGene[]

  //
  @@id([blockId, scaffoldId])
}

model MsynGroup {
  //
  groupId String @id

  //
  block   MsynBlock @relation(fields: [blockId], references: [blockId])
  blockId String

  genes MsynGene[]
}

model MsynGene {
  //
  track      MsynTrack @relation(fields: [blockId, scaffoldId], references: [blockId, scaffoldId])
  blockId    String
  scaffoldId String

  group   MsynGroup @relation(fields: [groupId], references: [groupId])
  groupId String

  gene   Gene   @relation(fields: [geneId, scaffoldId], references: [geneId, scaffoldId])
  geneId String

  //
  @@id([blockId, scaffoldId, groupId, geneId])
}
