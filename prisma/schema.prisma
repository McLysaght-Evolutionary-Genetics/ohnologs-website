generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: segments
// TODO: microsynteny

enum GenomeCompleteness {
  chromosome
  scaffold
}

model Species {
  id String @id @default(uuid())

  //
  name         String             @unique
  completeness GenomeCompleteness @default(chromosome)
  version      String

  //
  source         GenomeSource @relation(fields: [genomeSourceId], references: [id])
  genomeSourceId String

  state         GenomeState @relation(fields: [genomeStateId], references: [id])
  genomeStateId String

  scaffolds   Scaffold[]
  treeSpecies TreeSpecies[]
}

model GenomeSource {
  id String @id @default(uuid())

  //
  name String @unique

  //
  species Species[]
}

model GenomeState {
  id String @id @default(uuid())

  //
  name String @unique

  //
  species Species[]
}

model Scaffold {
  id String @id @default(uuid())

  //
  name  String
  start Int
  end   Int

  //
  species   Species @relation(fields: [speciesId], references: [id])
  speciesId String

  genes    Gene[]
  segments Segment[]
  tracks   MsynTrack[]

  //
  @@unique([name, speciesId])
}

model Segment {
  id String @id @default(uuid())

  //
  name  String
  start Int
  end   Int

  //
  scaffold   Scaffold @relation(fields: [scaffoldId], references: [id])
  scaffoldId String
}

model Gene {
  id String @id @default(uuid())

  //
  geneId    String @unique
  proteinId String @unique
  start     Int
  end       Int

  //
  scaffold   Scaffold? @relation(fields: [scaffoldId], references: [id])
  scaffoldId String?

  family   Family? @relation(fields: [familyId], references: [id])
  familyId String?

  labels GeneLabel[]
  trees  TreeGene[]
  groups MsynGene[]

  //
  @@unique([geneId, scaffoldId])
}

// orthology/paralogy relationships
model Family {
  id String @id @default(uuid())

  //
  index Int @unique

  //
  genes Gene[]
}

// evidence-based labelling
model Label {
  id String @id @default(uuid())

  //
  name String @unique

  //
  genes GeneLabel[]
}

model GeneLabel {
  //
  gene   Gene   @relation(fields: [geneId], references: [id])
  geneId String

  label   Label  @relation(fields: [labelId], references: [id])
  labelId String

  //
  @@id([geneId, labelId])
}

// gene tree viewer
model Tree {
  id String @id @default(uuid())

  //
  newick String

  //
  genes   TreeGene[]
  species TreeSpecies[]
}

model TreeGene {
  //
  tree   Tree   @relation(fields: [treeId], references: [id])
  treeId String

  gene   Gene   @relation(fields: [geneId], references: [id])
  geneId String

  //
  @@id([treeId, geneId])
}

model TreeSpecies {
  //
  tree   Tree   @relation(fields: [treeId], references: [id])
  treeId String

  species   Species @relation(fields: [speciesId], references: [id])
  speciesId String

  //
  @@id([treeId, speciesId])
}

//
model MsynBlock {
  id String @default(uuid())

  //
  groups MsynGroup[]
  tracks MsynTrack[]

  //
  @@id([id])
}

model MsynTrack {
  //
  start Int
  end   Int

  //
  block   MsynBlock @relation(fields: [blockId], references: [id])
  blockId String

  scaffold   Scaffold @relation(fields: [scaffoldId], references: [id])
  scaffoldId String

  genes MsynGene[]

  //
  @@id([blockId, scaffoldId])
}

model MsynGroup {
  id String @default(uuid())

  //
  block   MsynBlock @relation(fields: [blockId], references: [id])
  blockId String

  genes MsynGene[]

  //
  @@id([id])
}

model MsynGene {
  //
  track      MsynTrack @relation(fields: [blockId, scaffoldId], references: [blockId, scaffoldId])
  blockId    String
  scaffoldId String

  group   MsynGroup @relation(fields: [groupId], references: [id])
  groupId String

  gene   Gene   @relation(fields: [geneId, scaffoldId], references: [geneId, scaffoldId])
  geneId String

  //
  @@id([blockId, scaffoldId, groupId, geneId])
}
